
	.data
a_:	.word 0
b_:	.word 0
c_:	.double 0.0
x_:	.word 0

	.text 			# The .text assembler directive indicates
	.globl func1_		# The following is the code (as oppose to data)
func1_:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 8		# Make space for the locals
# Prologue ends

	lw $v0, 12($fp)
	lw $t0, 16($fp)
	add $t1, $v0, $t0
	sw $t1, 12($fp)
	li $v0, 3
	l.d $f12, 24($fp)
	syscall
	lw $v0, 12($fp)
	move $v1, $v0
	j epilogue_func1_
	li $v0, 3
	l.d $f12, 24($fp)
	syscall

# Epilogue Begins
epilogue_func1_:
	add $sp, $sp, 8
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


	.text 			# The .text assembler directive indicates
	.globl func2_		# The following is the code (as oppose to data)
func2_:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 8		# Make space for the locals
# Prologue ends

	lw $v0, 12($fp)
	lw $t0, 16($fp)
	sub $t1, $v0, $t0
	sw $t1, 12($fp)
	li $v0, 3
	l.d $f12, 24($fp)
	syscall
	lw $v0, 12($fp)
	move $v1, $v0
	j epilogue_func2_
	li $v0, 3
	l.d $f12, 24($fp)
	syscall

# Epilogue Begins
epilogue_func2_:
	add $sp, $sp, 8
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 8		# Make space for the locals
# Prologue ends

	li $v0, 7
	sw $v0, a_
	li $v0, 3
	sw $v0, b_
	li.d $f2, 3.50
	s.d $f2, c_
	l.d $f2, c_
	s.d $f2, 0($sp)
	lw $v0, b_
	sw $v0, -8($sp)
	lw $v0, a_
	sw $v0, -12($sp)
	sub $sp, $sp, 16
	jal func1_
	add $sp, $sp, 16
	move $v0, $v1
	sw $v0, x_
	li $v0, 1
	lw $a0, x_
	syscall
	l.d $f2, c_
	s.d $f2, 0($sp)
	lw $v0, b_
	sw $v0, -8($sp)
	lw $v0, a_
	sw $v0, -12($sp)
	sub $sp, $sp, 16
	jal func2_
	add $sp, $sp, 16
	move $v0, $v1
	sw $v0, x_
	li $v0, 1
	lw $a0, x_
	syscall

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 8
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends

