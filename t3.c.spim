
	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 32		# Make space for the locals
# Prologue ends

	li $v0, 5
	sw $v0, 0($fp)
	li $v0, 3
	sw $v0, -4($fp)
	li $v0, 1
	sw $v0, -8($fp)
	li.d $f2, 0.50
	s.d $f2, -12($fp)
	li $v0, 10
	sw $v0, -20($fp)
	lw $v0, 0($fp)
	li $t0, 5
	seq $t1, $v0, $t0
	lw $v0, -4($fp)
	li $t0, 3
	seq $t2, $v0, $t0
	lw $v0, -8($fp)
	li $t0, 0
	seq $t3, $v0, $t0
	or $v0, $t2, $t3
	and $t0, $t1, $v0
	beq $t0, $zero, label5 
	li $v0, 20
	sw $v0, -20($fp)
	j label6

label5:    	
	lw $v0, -8($fp)
	li $t1, 1
	seq $t2, $v0, $t1
	beq $t2, $zero, label7 
	li $v0, 30
	sw $v0, -20($fp)

label7:    	

label6:    	
	li $v0, 1
	lw $a0, -20($fp)
	syscall
	l.d $f2, -12($fp)
	li.d $f4, 0.40
	c.le.d $f2, $f4
	bc1f label8
	li $t0, 40
	sw $t0, -20($fp)
	j label9

label8:    	
	l.d $f2, -12($fp)
	li.d $f4, 0.50
	c.eq.d $f2, $f4
	bc1t label10
	li $t1, 50
	sw $t1, -20($fp)
	j label11

label10:    	
	li $t1, 60
	sw $t1, -20($fp)

label11:    	

label9:    	
	li $v0, 1
	lw $a0, -20($fp)
	syscall

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 32
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends

