
	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 36		# Make space for the locals
# Prologue ends

	li.d $f2, 1.00
	s.d $f2, -12($fp)
	li $v0, 1
	sw $v0, 0($fp)
	li.d $f2, 0.00
	s.d $f2, -20($fp)
	j label3

label2:    	
	l.d $f2, -20($fp)
	l.d $f4, -12($fp)
	add.d $f6, $f2, $f4
	s.d $f6, -20($fp)
	l.d $f2, -12($fp)
	li.d $f4, 2.00
	add.d $f6, $f2, $f4
	s.d $f6, -12($fp)
	lw $v0, 0($fp)
	li $t0, 1
	add $t2, $v0, $t0
	sw $t2, 0($fp)

label3:    	
	lw $v0, 0($fp)
	li $t0, 11
	sle $t1, $v0, $t0
	bne $t1, $zero, label2 
	li $v0, 3
	l.d $f12, -20($fp)
	syscall
	li $v0, 1
	sw $v0, -4($fp)
	li $v0, 1
	sw $v0, 0($fp)
	li $v0, 0
	sw $v0, -8($fp)
	j label5

label4:    	
	lw $v0, -8($fp)
	lw $t0, -4($fp)
	lw $t2, -4($fp)
	mul $t3, $t0, $t2
	add $t0, $v0, $t3
	sw $t0, -8($fp)
	lw $v0, -4($fp)
	li $t0, 1
	add $t2, $v0, $t0
	sw $t2, -4($fp)
	lw $v0, 0($fp)
	li $t0, 1
	add $t2, $v0, $t0
	sw $t2, 0($fp)

label5:    	
	lw $v0, 0($fp)
	li $t0, 11
	slt $t1, $v0, $t0
	bne $t1, $zero, label4 
	li $v0, 1
	lw $a0, -8($fp)
	syscall

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 36
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends

